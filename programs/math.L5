(let ([not_reg (lambda (a) (if a 1 0))])
  (let ([and_reg (lambda (a b) (if a b 0))])
    (let ([or_reg (lambda (a b) (if a 1 b))])
      (let ([not_thunk (lambda (a) (if (a) 1 0))])
        (let ([and_thunk (lambda (a b) (if a (b) 0))])
          (let ([or_thunk (lambda (a b) (if a 1 (b)))])
            (letrec ([divides (lambda (big small)
                                (or_reg (= big 0)
                                        (and_thunk (<= 0 big)
                                                   (lambda ()
                                                     (divides (- big small) small)))))])
              (letrec ([try_prime (lambda (x current)
                                    (or_reg (= x current)
                                            (and_thunk (<= 2 x)
                                                       (lambda ()
                                                         (and_thunk (not_thunk (lambda ()
                                                                                 (divides x current)))
                                                                    (lambda ()
                                                                      (try_prime x (+ current 1))))))))])
                (let ([prime (lambda (x) (try_prime x 2))])
                  (letrec ([find_prime (lambda (top bottom)
                                         (and_thunk (< bottom top)
                                                    (lambda ()
                                                      (if (prime bottom)
                                                          (begin
                                                            (print bottom)
                                                            (find_prime top (+ bottom 1)))
                                                          (find_prime top (+ bottom 1))))))])
                    (find_prime 100 1)))))))))))
