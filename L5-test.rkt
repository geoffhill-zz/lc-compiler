#lang plai
(print-only-errors #t)

;;; EECS 322 L5->L4 Compiler -- Test
;;; Geoff Hill <GeoffreyHill2012@u.northwestern.edu>
;;; Spring 2011

(require (file "types.rkt"))
(require (file "input.rkt"))
(require (file "L5.rkt"))

(test (free-vars (build-L5expr 5))
      (set))
(test (free-vars (build-L5expr '<))
      (set))
(test (free-vars (build-L5expr 'number?))
      (set))
(test (free-vars (build-L5expr 'temp))
      (set 'temp))
(test (free-vars (build-L5expr '(+ a b)))
      (set 'a 'b))
(test (free-vars (build-L5expr '(number? arg)))
      (set 'arg))
(test (free-vars (build-L5expr '(op arg)))
      (set 'op 'arg))
(test (free-vars (build-L5expr '(+ (let ([a 12]) a) a)))
      (set 'a))
(test (free-vars (build-L5expr '(let ([a 1]) (let ([b 2]) (+ a b)))))
      (set))
(test (free-vars (build-L5expr '(let ([c 1]) (let ([d 2]) (+ a b)))))
      (set 'a 'b))
(test (free-vars (build-L5expr '(letrec ([a 1]) (letrec ([b 2]) (+ a b)))))
      (set))
(test (free-vars (build-L5expr '(letrec ([c 1]) (letrec ([d 2]) (+ a b)))))
      (set 'a 'b))
(test (free-vars (build-L5expr '(let ([a (+ b c)]) a)))
      (set 'b 'c))
(test (free-vars (build-L5expr '(let ([a (+ a 1)]) a)))
      (set 'a))
(test (free-vars (build-L5expr '(if a b c)))
      (set 'a 'b 'c))
(test (free-vars (build-L5expr '(let ([a 1]) (letrec ([b 2]) (let ([c -12]) (if a b c))))))
      (set))
(test (free-vars (build-L5expr '(if (- t u) (+ v w) (let ([x 9]) (* x (* y z))))))
      (set 't 'u 'v 'w 'y 'z))
(test (free-vars (build-L5expr '(lambda (x y z) (+ x (* y z)))))
      (set))
(test (free-vars (build-L5expr '(lambda (a b c) (+ x (* y z)))))
      (set 'x 'y 'z))
(test (free-vars (build-L5expr '((lambda (x y z) (+ x (* y z))) a b c)))
      (set 'a 'b 'c))
(test (free-vars (build-L5expr '(let ([b 3]) ((lambda (x y z) (+ x (* y z))) a b c))))
      (set 'a 'c))
(test (free-vars (build-L5expr '(new-tuple 4)))
      (set))
(test (free-vars (build-L5expr '(new-tuple a b c d)))
      (set 'a 'b 'c 'd))
(test (free-vars (build-L5expr '(let ([c 3]) (new-tuple a b c d))))
      (set 'a 'b 'd))
(test (free-vars (build-L5expr '(new-tuple (+ a b) (- c d) (* e f) (- g (+ h i)))))
      (set 'a 'b 'c 'd 'e 'f 'g 'h 'i))
(test (free-vars (build-L5expr '(begin g h)))
      (set 'g 'h))
(test (free-vars (build-L5expr '(let ([g g]) (begin g h))))
      (set 'g 'h))
(test (free-vars (build-L5expr '(let ([g (+ a b)]) (begin g h))))
      (set 'a 'b 'h))

(test (make-closures (build-L5expr '5))
      (cljmap))
(test (make-closures (build-L5expr '(+ 5 6)))
      (cljmap))
(test (make-closures (build-L5expr '(+ 5 (- (let ([x 2]) x) 1))))
      (cljmap))
(test (make-closures (build-L5expr '(lambda (x y) (+ x y))))
      (cljmap 0
              (lft-clj ':l5clj_0
                       '(vars-tup x y)
                       '()
                       (build-L5expr '(+ x y)))))
(test (make-closures (build-L5expr '(let ([x (lambda (y) (+ x y))]) x)))
      (cljmap 1
              (lft-clj ':l5clj_0
                       '(vars-tup y)
                       '(x)
                       (build-L5expr '(let ([x (aref vars-tup 0)]) (+ x y))))))
(test (make-closures (build-L5expr '(let ([x 4]) (lambda (y) (+ x y)))))
      (cljmap 2
              (lft-clj ':l5clj_0
                       '(vars-tup y)
                       '(x)
                       (build-L5expr '(let ([x (aref vars-tup 0)]) (+ x y))))))

(test (compile-L5expr (build-L5expr '5))
      (build-L4prog '(5)))
(test (compile-L5expr (build-L5expr '(+ 4 5)))
      (build-L4prog '((+ 4 5))))
(test (compile-L5expr (build-L5expr '(let ([x 4]) x)))
      (build-L4prog '((let ([x 4]) x))))
(test (compile-L5expr (build-L5expr '(lambda () 4)))
      (build-L4prog '((make-closure :l5clj_0 (new-tuple))
                      (:l5clj_0 (vars-tup) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda () 4)]) 5)))
      (build-L4prog '((let ([x (make-closure :l5clj_0 (new-tuple))]) 5)
                      (:l5clj_0 (vars-tup) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda () 4)]) (x))))
      (build-L4prog '((let ([x (make-closure :l5clj_0 (new-tuple))])
                        ((closure-proc x) (closure-vars x)))
                      (:l5clj_0 (vars-tup) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda (t) (t 4 5))]) (x +))))
      (build-L4prog '((let ([x (make-closure :l5clj_0 (new-tuple))])
                        ((closure-proc x) (closure-vars x) +))
                      (:l5clj_0 (vars-tup t)
                                ((closure-proc t) (closure-vars t) 4 5)))))

(printf "tests completed~n")
