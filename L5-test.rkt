#lang plai
(print-only-errors #t)

;;; EECS 322 L5->L4 Compiler -- Test
;;; Geoff Hill <GeoffreyHill2012@u.northwestern.edu>
;;; Spring 2011

(require (file "types.rkt"))
(require (file "input.rkt"))
(require (file "L5.rkt"))

(test (inline (build-L5expr '5))
      (build-L5expr '5))
(test (inline (build-L5expr '(+ 4 5)))
      (build-L5expr '(+ 4 5)))
(test (inline (build-L5expr '(* a (- b c))))
      (build-L5expr '(* a (- b c))))
(test (inline (build-L5expr '(r s t)))
      (build-L5expr '(r s t)))
(test (inline (build-L5expr '(let ([x 5]) x)))
      (build-L5expr '(let ([x 5]) x)))
(test (inline (build-L5expr '(let ([x 5]) (let ([y 8]) (+ x y)))))
      (build-L5expr '(let ([x 5]) (let ([y 8]) (+ x y)))))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) (x 5))))
      (build-L5expr '(let ([h 5]) h)))
(test (inline (build-L5expr '(let ([x (lambda (h) (h))]) (x (lambda () 2)))))
      (build-L5expr '(let ([h (lambda () 2)]) (h))))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) (letrec ([x 6]) x))))
      (build-L5expr '(letrec ([x 6]) x)))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) (a x))))
      (build-L5expr '(a (lambda (h) h))))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) x)))
      (build-L5expr '(lambda (h) h)))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) (x x))))
      (build-L5expr '(let ([h (lambda (h) h)]) h)))
(test (inline (build-L5expr '(let ([x (lambda (h) h)]) (if 1 (x 3) (x 4)))))
      (build-L5expr '(if 1 (let ([h 3]) h) (let ([h 4]) h))))

(test (clean (build-L5expr '(let ([a 5]) a)))
      (build-L5expr '5))
(test (clean (build-L5expr '(let ([h 1]) (let ([g -2]) h))))
      (build-L5expr '1))
(test (clean (build-L5expr '(let ([h 1]) (let ([g -2]) g))))
      (build-L5expr '-2))
(test (clean (build-L5expr '(let ([h 1]) (let ([h 6]) h))))
      (build-L5expr '6))
(test (clean (build-L5expr '(let ([h 2]) (let ([g h]) g))))
      (build-L5expr '2))
(test (clean (build-L5expr '(let ([e (lambda () f)]) (e))))
      (build-L5expr '(let ([e (lambda () f)]) (e))))
(test (clean (build-L5expr '(let ([e (lambda (i) (f i))]) (e g))))
      (build-L5expr '(let ([e (lambda (i) (f i))]) (e g))))
(test (clean (build-L5expr '(let ([h 1]) (let ([h y]) h))))
      (build-L5expr 'y))

(test (optimize (build-L5expr '(let ([and (lambda (a b) (if a b 0))])
                                 (let ([or (lambda (a b) (if a 1 b))])
                                   (let ([fn (lambda () (+ (and 1 0) (or 1 0)))])
                                     (fn))))))
      (build-L5expr '(+ (if 1 0 0) (if 1 1 0))))
(test (optimize (build-L5expr '(let ([and (lambda (a b) (if a b 0))])
                                 (let ([or (lambda (a b) (if a 1 b))])
                                   (let ([fn (lambda () (+ (and y z) (or z y)))])
                                     (fn))))))
      (build-L5expr '(let ([fn (lambda () (+ (if y z 0) (if z 1 y)))]) (fn))))

(test (elim-letrec (build-L5expr '5))
      (build-L5expr '5))
(test (elim-letrec (build-L5expr '(+ 4 5)))
      (build-L5expr '(+ 4 5)))
(test (elim-letrec (build-L5expr '(* a (- b c))))
      (build-L5expr '(* a (- b c))))
(test (elim-letrec (build-L5expr '(let ([x (lambda () (x 5))]) (x))))
      (build-L5expr '(let ([x (lambda () (x 5))]) (x))))
(test (elim-letrec (build-L5expr '(letrec ([x (lambda (t) (x t))]) (x 5))))
      (build-L5expr '(let ([recvar_0 (new-tuple 0)])
                       (begin (aset recvar_0 0 (lambda (t) ((aref recvar_0 0) t)))
                              ((aref recvar_0 0) 5)))))
(test (elim-letrec (build-L5expr '(letrec ([x (lambda () (x))])
                                    (letrec ([y (lambda () (+ (x) (y)))])
                                      (y)))))
      (build-L5expr '(let ([recvar_0 (new-tuple 0)])
                       (begin
                         (aset recvar_0 0 (lambda () ((aref recvar_0 0))))
                         (let ([recvar_1 (new-tuple 0)])
                           (begin (aset recvar_1 0 (lambda () (+ ((aref recvar_0 0)) ((aref recvar_1 0)))))
                                  ((aref recvar_1 0))))))))

(test (free-vars (build-L5expr 5))
      (set))
(test (free-vars (build-L5expr '<))
      (set))
(test (free-vars (build-L5expr 'number?))
      (set))
(test (free-vars (build-L5expr 'temp))
      (set 'temp))
(test (free-vars (build-L5expr '(+ a b)))
      (set 'a 'b))
(test (free-vars (build-L5expr '(number? arg)))
      (set 'arg))
(test (free-vars (build-L5expr '(op arg)))
      (set 'op 'arg))
(test (free-vars (build-L5expr '(+ (let ([a 12]) a) a)))
      (set 'a))
(test (free-vars (build-L5expr '(let ([a 1]) (let ([b 2]) (+ a b)))))
      (set))
(test (free-vars (build-L5expr '(let ([c 1]) (let ([d 2]) (+ a b)))))
      (set 'a 'b))
(test (free-vars (build-L5expr '(letrec ([a 1]) (letrec ([b 2]) (+ a b)))))
      (set))
(test (free-vars (build-L5expr '(letrec ([c 1]) (letrec ([d 2]) (+ a b)))))
      (set 'a 'b))
(test (free-vars (build-L5expr '(let ([a (+ b c)]) a)))
      (set 'b 'c))
(test (free-vars (build-L5expr '(let ([a (+ a 1)]) a)))
      (set 'a))
(test (free-vars (build-L5expr '(if a b c)))
      (set 'a 'b 'c))
(test (free-vars (build-L5expr '(let ([a 1]) (letrec ([b 2]) (let ([c -12]) (if a b c))))))
      (set))
(test (free-vars (build-L5expr '(if (- t u) (+ v w) (let ([x 9]) (* x (* y z))))))
      (set 't 'u 'v 'w 'y 'z))
(test (free-vars (build-L5expr '(lambda (x y z) (+ x (* y z)))))
      (set))
(test (free-vars (build-L5expr '(lambda (a b c) (+ x (* y z)))))
      (set 'x 'y 'z))
(test (free-vars (build-L5expr '((lambda (x y z) (+ x (* y z))) a b c)))
      (set 'a 'b 'c))
(test (free-vars (build-L5expr '(let ([b 3]) ((lambda (x y z) (+ x (* y z))) a b c))))
      (set 'a 'c))
(test (free-vars (build-L5expr '(new-tuple 4)))
      (set))
(test (free-vars (build-L5expr '(new-tuple a b c d)))
      (set 'a 'b 'c 'd))
(test (free-vars (build-L5expr '(let ([c 3]) (new-tuple a b c d))))
      (set 'a 'b 'd))
(test (free-vars (build-L5expr '(new-tuple (+ a b) (- c d) (* e f) (- g (+ h i)))))
      (set 'a 'b 'c 'd 'e 'f 'g 'h 'i))
(test (free-vars (build-L5expr '(begin g h)))
      (set 'g 'h))
(test (free-vars (build-L5expr '(let ([g g]) (begin g h))))
      (set 'g 'h))
(test (free-vars (build-L5expr '(let ([g (+ a b)]) (begin g h))))
      (set 'a 'b 'h))

(test (bif-lbl '+) ':l5bif_plus)
(test (bif-lbl 'a?) ':l5bif_a)

(test (bif-clj '+) (closure ':l5bif_plus
                            '(frees arg0 arg1)
                            (build-L5expr '(+ arg0 arg1))))
(test (bif-clj 'a?) (closure ':l5bif_a
                             '(frees arg0)
                             (build-L5expr '(a? arg0))))

(test (compile-L5expr (build-L5expr '5))
      (build-L4prog '(5)))
(test (compile-L5expr (build-L5expr '(+ 4 5)))
      (build-L4prog '((+ 4 5))))
(test (compile-L5expr (build-L5expr '(let ([x 4]) x)))
      (build-L4prog '((let ([v0 4]) v0))))
(test (compile-L5expr (build-L5expr '(lambda () 4)))
      (build-L4prog '((make-closure :l5clj_0 0)
                      (:l5clj_0 (frees) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda () 4)]) 5)))
      (build-L4prog '((let ([v0 (make-closure :l5clj_0 0)]) 5)
                      (:l5clj_0 (frees) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda () 4)]) (x))))
      (build-L4prog '((let ([v0 (make-closure :l5clj_0 0)])
                        ((closure-proc v0) (closure-vars v0)))
                      (:l5clj_0 (frees) 4))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda (t) (t 4 5))]) (x z))))
      (build-L4prog '((let ([v1 (make-closure :l5clj_0 0)])
                        ((closure-proc v1) (closure-vars v1) v2))
                      (:l5clj_0 (frees v0)
                                ((closure-proc v0) (closure-vars v0) 4 5)))))
(test (compile-L5expr (build-L5expr '(let ([x (lambda (t) (t 4 5))]) (print (x +)))))
      (build-L4prog '((let ([v1 (make-closure :l5clj_0 0)])
                        (print ((closure-proc v1) (closure-vars v1) (make-closure :l5bif_plus 0))))
                      (:l5bif_plus (frees arg0 arg1) (+ arg0 arg1))
                      (:l5clj_0 (frees v0) ((closure-proc v0) (closure-vars v0) 4 5)))))

(test (compile-L5expr (build-L5expr '(letrec ([x 6]) (print x))))
      (build-L4prog '((let ([recvar_0 (new-tuple 0)])
                        (begin (aset recvar_0 0 6)
                               (print (aref recvar_0 0)))))))

(printf "tests completed~n")
