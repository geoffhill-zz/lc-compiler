#lang plai
(print-only-errors #t)

;;; EECS 322 L Renaming -- Test
;;; Geoff Hill <GeoffreyHill2012@u.northwestern.edu>
;;; Spring 2011

(require (file "input.rkt"))
(require (file "output.rkt")) ;; TODO: remove after debugging
(require (file "renaming.rkt"))

(let ([d (dict)])
  (test/pred (dict? d) (not/c false?))
  
  (test (dict-extend! d 'c (λ () 'x)) 'x)
  (test/pred (dict? d) (not/c false?))
  
  (test (dict-extend! d 'a (λ () 't0)) 't0)
  (test (dict-extend! d 'b (λ () 't1)) 't1)
  (test (dict-extend! d 'c (λ () 't2)) 'x)
  (test/pred (dict? d) (not/c false?))
  
  (test (dict-override! d 'd (λ () 'g)) 'g)
  (test/pred (dict? d) (not/c false?))
  
  (test (dict-extend! d 'a (λ () 'x)) 't0)
  (test (dict-override! d 'a (λ () 'y)) 'y)
  (test (dict-extend! d 'a (λ () 'z)) 'y)
  (test/pred (dict? d) (not/c false?))
  
  (void))


(test (rename-L1prog (build-L1prog '(((eax <- 9)))))
      (build-L1prog '(((eax <- 9)))))
(test (rename-L1prog (build-L1prog '((:go (eax <- 1)))))
      (build-L1prog '((:L0 (eax <- 1)))))
(test (rename-L2prog (build-L2prog '(((ecx <- 1))
                                     (:also (esi <- 9) (edx <- :also) (eax <- :also)))))
      (build-L2prog '(((ecx <- 1))
                      (:L0 (esi <- 9) (edx <- :L0) (eax <- :L0)))))
(test (rename-L2prog (build-L2prog '((:go (ecx <- 1))
                                     (:also (esi <- 9) (edx <- :go) (eax <- :also)))))
      (build-L2prog '((:L0 (ecx <- 1))
                      (:L1 (esi <- 9) (edx <- :L0) (eax <- :L1)))))
(test (rename-L2prog (build-L2prog '((:go (cjump edx <= ecx :L0 :L1) :L1 (eax <- 5) :L0)
                                     (:also (esi <- 9) (edx <- :go) (eax <- :also)))))
      (build-L2prog '((:L0 (cjump edx <= ecx :L2 :L3) :L3 (eax <- 5) :L2)
                      (:L1 (esi <- 9) (edx <- :L0) (eax <- :L1)))))


(test (rename-L2prog (build-L2prog '(((eax <- 9)))))
      (build-L2prog '(((eax <- 9)))))
(test (rename-L2prog (build-L2prog '((:go (eax <- 1)))))
      (build-L2prog '((:L0 (eax <- 1)))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1)))))
      (build-L2prog '((:L0 (v0 <- 1)))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1))
                                     (:also (f <- 3) (g <- 7)))))
      (build-L2prog '((:L0 (v0 <- 1))
                      (:L1 (v0 <- 3) (v1 <- 7)))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1))
                                     (:also (f <- 3) (f <- 7)))))
      (build-L2prog '((:L0 (v0 <- 1))
                      (:L1 (v0 <- 3) (v0 <- 7)))))
(test (rename-L2prog (build-L2prog '(((a <- 19) ((mem ebp -4) <- a) (eax <- (print a))))))
      (build-L2prog '(((v0 <- 19) ((mem ebp -4) <- v0) (eax <- (print v0))))))
(test (rename-L2prog (build-L2prog '((:go (v1 <- -8) (v1 <- :t1) (eax <- (print v1)))
                                     (:t1 (v2 <- 12)))))
      (build-L2prog '((:L0 (v0 <- -8) (v0 <- :L1) (eax <- (print v0)))
                      (:L1 (v0 <- 12)))))
(test (rename-L2prog (build-L2prog '((:go) (:a) (:b) (:c) (:d) (:e) (:f) (:g) (:h) (:i) (:j))))
      (build-L2prog '((:L0) (:L1) (:L2) (:L3) (:L4) (:L5)
                            (:L6) (:L7) (:L8) (:L9) (:L10))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1)))))
      (build-L2prog '((:L0 (v0 <- 1)))))
(test (rename-L2prog (build-L2prog '((:start (t <- 11) (e <- :fn1) (ecx <- t) (call :fn1))
                                     (:fn0 (g <- ecx) (eax <- (print g)) (return))
                                     (:fn1 (g <- ecx) (eax <- (allocate g g)) (return)))))
      (build-L2prog '((:L0 (v0 <- 11) (v1 <- :L2) (ecx <- v0) (call :L2))
                      (:L1 (v0 <- ecx) (eax <- (print v0)) (return))
                      (:L2 (v0 <- ecx) (eax <- (allocate v0 v0)) (return)))))
(test (rename-L2prog (build-L2prog '((:start (t <- 11) (e <- :fn1) (ecx <- t) (call e))
                                     (:fn0 (g <- ecx) (eax <- (print g)) (tail-call :fn1))
                                     (:fn1 (g <- ecx) (eax <- (allocate g g)) (tail-call :fn0)))))
      (build-L2prog '((:L0 (v0 <- 11) (v1 <- :L2) (ecx <- v0) (call v1))
                      (:L1 (v0 <- ecx) (eax <- (print v0)) (tail-call :L2))
                      (:L2 (v0 <- ecx) (eax <- (allocate v0 v0)) (tail-call :L1)))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1) :next (goto :go)))))
      (build-L2prog '((:L0 (v0 <- 1) :L1 (goto :L0)))))
(test (rename-L2prog (build-L2prog '((:go (a <- 1) :next (goto :next)))))
      (build-L2prog '((:L0 (v0 <- 1) :L1 (goto :L1)))))
(test (rename-L2prog (build-L2prog '((:start (t <- 11) (d <- -2) (cjump d <= t :good :bad) :bad :good)
                                     (:fn0 (g <- ecx) (eax <- (print g)) (tail-call :fn1))
                                     (:fn1 (g <- ecx) (eax <- (allocate g g)) (tail-call :fn0)))))
      (build-L2prog '((:L0 (v0 <- 11) (v1 <- -2) (cjump v1 <= v0 :L3 :L4) :L4 :L3)
                      (:L1 (v0 <- ecx) (eax <- (print v0)) (tail-call :L2))
                      (:L2 (v0 <- ecx) (eax <- (allocate v0 v0)) (tail-call :L1)))))


(test (rename-L3prog (build-L3prog '(5)))
      (build-L3prog '(5)))
(test (rename-L3prog (build-L3prog '(-7)))
      (build-L3prog '(-7)))
(test (rename-L3prog (build-L3prog '(h)))
      (build-L3prog '(v0)))
(test (rename-L3prog (build-L3prog '((h))))
      (build-L3prog '((v0))))
(test (rename-L3prog (build-L3prog '((h h h h))))
      (build-L3prog '((v0 v0 v0 v0))))
(test (rename-L3prog (build-L3prog '((+ 1 2))))
      (build-L3prog '((+ 1 2))))
(test (rename-L3prog (build-L3prog '((- y z))))
      (build-L3prog '((- v0 v1))))
(test (rename-L3prog (build-L3prog '((< j j))))
      (build-L3prog '((< v0 v0))))
(test (rename-L3prog (build-L3prog '((let ([x 5]) x))))
      (build-L3prog '((let ([v0 5]) v0))))
(test (rename-L3prog (build-L3prog '((let ([x 5]) (let ([y -2]) y)))))
      (build-L3prog '((let ([v0 5]) (let ([v1 -2]) v1)))))
(test (rename-L3prog (build-L3prog '((let ([x 5]) (let ([x -2]) x)))))
      (build-L3prog '((let ([v0 5]) (let ([v1 -2]) v1)))))
(test (rename-L3prog (build-L3prog '((let ([a -1]) (let ([b a]) (+ a b))))))
      (build-L3prog '((let ([v0 -1]) (let ([v1 v0]) (+ v0 v1))))))
(test (rename-L3prog (build-L3prog '((let ([a -1]) (let ([a a]) (+ a a))))))
      (build-L3prog '((let ([v0 -1]) (let ([v1 v0]) (+ v1 v1))))))
(test (rename-L3prog (build-L3prog '((if 1 2 3))))
      (build-L3prog '((if 1 2 3))))
(test (rename-L3prog (build-L3prog '((if p p p))))
      (build-L3prog '((if v0 v0 v0))))
(test (rename-L3prog (build-L3prog '((if a b c))))
      (build-L3prog '((if v0 v1 v2))))
(test (rename-L3prog (build-L3prog '((if s t (+ t s)))))
      (build-L3prog '((if v0 v1 (+ v1 v0)))))
(test (rename-L3prog (build-L3prog '((let ([r :eee]) (r 7 8))
                                     (:eee (de df)
                                           (let ([g (+ de df)])
                                             (print g))))))
      (build-L3prog '((let ([v0 :L0]) (v0 7 8))
                      (:L0 (v0 v1)
                           (let ([v2 (+ v0 v1)])
                             (print v2))))))
(test (rename-L3prog (build-L3prog '((let ([ttt (:z 5 9)]) (print 6))
                                     (:y (a b c) (print 7))
                                     (:z (b c) (print 8)))))
      (build-L3prog '((let ([v0 (:L1 5 9)]) (print 6))
                      (:L0 (v0 v1 v2) (print 7))
                      (:L1 (v0 v1) (print 8)))))
(test (rename-L3prog (build-L3prog '((if x :red :blue))))
      (build-L3prog '((if v0 :L0 :L1))))
(test (rename-L3prog (build-L3prog '((let ([x 5]) (if 1 (let ([x 4]) x) x)))))
      (build-L3prog '((let ([v0 5]) (if 1 (let ([v1 4]) v1) v0)))))

(test (rename-L4prog (build-L4prog '(5)))
      (build-L4prog '(5)))
(test (rename-L4prog (build-L4prog '(fff)))
      (build-L4prog '(v0)))
(test (rename-L4prog (build-L4prog '((f f f))))
      (build-L4prog '((v0 v0 v0))))
(test (rename-L4prog (build-L4prog '((let ([x 5]) x))))
      (build-L4prog '((let ([v0 5]) v0))))
(test (rename-L4prog (build-L4prog '((let ([x 2]) (let ([x (+ x x)]) (print x))))))
      (build-L4prog '((let ([v0 2]) (let ([v1 (+ v0 v0)]) (print v1))))))
(test (rename-L4prog (build-L4prog '((let ([x -1]) (let ([x (let ([x x]) x)]) (print x))))))
      (build-L4prog '((let ([v0 -1]) (let ([v2 (let ([v1 v0]) v1)]) (print v2))))))
(test (rename-L4prog (build-L4prog '((if 1 2 3))))
      (build-L4prog '((if 1 2 3))))
(test (rename-L4prog (build-L4prog '((if r r r))))
      (build-L4prog '((if v0 v0 v0))))
(test (rename-L4prog (build-L4prog '((if a b c))))
      (build-L4prog '((if v0 v1 v2))))
(test (rename-L4prog (build-L4prog '((if (< s t) (- s t) (* t s)))))
      (build-L4prog '((if (< v0 v1) (- v0 v1) (* v1 v0)))))
(test (rename-L4prog (build-L4prog '((t (if a 5 6)))))
      (build-L4prog '((v0 (if v1 5 6)))))
(test (rename-L4prog (build-L4prog '((t (if a :green :black)))))
      (build-L4prog '((v0 (if v1 :L0 :L1)))))
(test (rename-L4prog (build-L4prog '((:t (if 1 :green :black))
                                     (:t (fn) (print (fn 6)))
                                     (:green (a) (+ a 1))
                                     (:black (b) (- b 1)))))
      (build-L4prog '((:L0 (if 1 :L1 :L2))
                      (:L0 (v0) (print (v0 6)))
                      (:L1 (v0) (+ v0 1))
                      (:L2 (v0) (- v0 1)))))
(test (rename-L4prog (build-L4prog '((:t (if 1 :green :black))
                                     (:black (b) (- b 1))
                                     (:green (a) (+ a 1))
                                     (:t (fn) (print (fn 6))))))
      (build-L4prog '((:L2 (if 1 :L1 :L0))
                      (:L0 (v0) (- v0 1))
                      (:L1 (v0) (+ v0 1))
                      (:L2 (v0) (print (v0 6))))))
(test (rename-L4prog (build-L4prog '((let ([x 5]) (if 1 (let ([x 4]) x) x)))))
      (build-L4prog '((let ([v0 5]) (if 1 (let ([v1 4]) v1) v0)))))

(test (rename-L5expr (build-L5expr '5))
      (build-L5expr '5))
(test (rename-L5expr (build-L5expr 'g))
      (build-L5expr 'v0))
(test (rename-L5expr (build-L5expr 'c))
      (build-L5expr 'v0))
(test (rename-L5expr (build-L5expr '(+ 4 5)))
      (build-L5expr '(+ 4 5)))
(test (rename-L5expr (build-L5expr '(+ h i)))
      (build-L5expr '(+ v0 v1)))
(test (rename-L5expr (build-L5expr '(* x (- y z))))
      (build-L5expr '(* v0 (- v1 v2))))
(test (rename-L5expr (build-L5expr '(* x (- y x))))
      (build-L5expr '(* v0 (- v1 v0))))
(test (rename-L5expr (build-L5expr '(let ([x 5]) x)))
      (build-L5expr '(let ([v0 5]) v0)))
(test (rename-L5expr (build-L5expr '(let ([x x]) x)))
      (build-L5expr '(let ([v1 v0]) v1)))
(test (rename-L5expr (build-L5expr '(let ([x x]) (let ([x x]) x))))
      (build-L5expr '(let ([v1 v0]) (let ([v2 v1]) v2))))
(test (rename-L5expr (build-L5expr '(if (let ([x x]) x) (let ([x x]) x) (let ([x x]) x))))
      (build-L5expr '(if (let ([v1 v0]) v1) (let ([v2 v0]) v2) (let ([v3 v0]) v3))))

(printf "tests completed~n")
